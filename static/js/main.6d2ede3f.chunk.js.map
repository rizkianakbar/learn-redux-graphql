{"version":3,"sources":["app/hooks.ts","app/graphql/index.ts","app/services/animeService/queries.ts","app/services/animeService/index.ts","app/containers/HomePage/HomePageSlice.tsx","app/containers/HomePage/selectors.ts","app/containers/HomePage/hotAnime.tsx","app/containers/HomePage/index.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppSelector","useSelector","apolloClient","ApolloClient","uri","cache","InMemoryCache","GET_ANIME_PAGE","gql","page","a","perPage","query","variables","response","data","Error","console","log","Page","HomePageSlice","createSlice","name","initialState","animePage","reducers","setAnimePage","state","action","payload","actions","makeSelectAnimePage","createSelector","homePage","HotAnimeContainer","styled","div","AnimeItemContainer","AnimeCover","AnimeTitle","h6","stateSelector","HotAnime","media","length","map","anime","src","coverImage","extraLarge","title","english","averageScore","Container","HomePage","props","dispatch","useDispatch","fetchAnimePage","animeService","getAnimePage","catch","err","useEffect","AppContainer","App","store","configureStore","middleware","getDefaultMiddleware","concat","ReduxLogger","reducer","homePageReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","ApolloProvider","client","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.6d2ede3f.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"./store\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { ApolloClient, InMemoryCache } from \"@apollo/client\";\r\n\r\nexport const apolloClient = new ApolloClient({\r\n  uri: \"https://graphql.anilist.co/\",\r\n  cache: new InMemoryCache(),\r\n});\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_ANIME_PAGE = gql`\r\n  query GetAnimePage($page: Int!, $perPage: Int!) {\r\n    Page(page: $page, perPage: $perPage) {\r\n      media {\r\n        id\r\n        description\r\n        averageScore\r\n        title {\r\n          english\r\n        }\r\n        coverImage {\r\n          extraLarge\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { apolloClient } from \"../../graphql\";\r\nimport { GET_ANIME_PAGE } from \"./queries\";\r\nimport { GetAnimePage } from \"./__generated__/GetAnimePage\";\r\n\r\nclass AnimeService {\r\n  async getAnimePage(page: Number, perPage = 5): Promise<GetAnimePage[\"Page\"]> {\r\n    try {\r\n      const response = await apolloClient.query({\r\n        query: GET_ANIME_PAGE,\r\n        variables: { page, perPage },\r\n      });\r\n\r\n      if (!response || !response.data)\r\n        throw new Error(\"Cannot get anime list!\");\r\n\r\n      console.log(\"DATA: \", response.data);\r\n\r\n      return response.data.Page;\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new AnimeService();\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { IHomePageState } from \"./types\";\r\n\r\nconst initialState: IHomePageState = {\r\n  animePage: null,\r\n};\r\n\r\nconst HomePageSlice = createSlice({\r\n  name: \"homePage\",\r\n  initialState,\r\n  reducers: {\r\n    setAnimePage(state, action) {\r\n      state.animePage = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setAnimePage } = HomePageSlice.actions;\r\nexport default HomePageSlice.reducer;\r\n","import { createSelector } from \"reselect\";\r\nimport { IRootState } from \"../../types\";\r\n\r\nconst selectHomePage = (state: IRootState) => state.homePage;\r\n\r\nexport const makeSelectAnimePage = createSelector(\r\n  selectHomePage,\r\n  (homePage) => homePage.animePage\r\n);\r\n","import React from \"react\";\r\nimport { createSelector } from \"reselect\";\r\nimport styled from \"styled-components\";\r\nimport { useAppSelector } from \"../../hooks\";\r\nimport { makeSelectAnimePage } from \"./selectors\";\r\n\r\nconst HotAnimeContainer = styled.div`\r\n  max-width: 1280px;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst AnimeItemContainer = styled.div`\r\n  width: 17em;\r\n  height: 18em;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst AnimeCover = styled.div`\r\n  width: auto;\r\n  height: 15em;\r\n  img {\r\n    width: auto;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nconst AnimeTitle = styled.h6`\r\n  margin-top: 8px;\r\n  font-size: 15px;\r\n  color: #000;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst stateSelector = createSelector(makeSelectAnimePage, (animePage) => ({\r\n  animePage,\r\n}));\r\n\r\nexport function HotAnime() {\r\n  const { animePage } = useAppSelector(stateSelector);\r\n\r\n  const isEmptyAnimePage =\r\n    !animePage || !animePage.media || animePage.media.length === 0;\r\n\r\n  if (isEmptyAnimePage) return <div>Loading...</div>;\r\n\r\n  return (\r\n    <HotAnimeContainer>\r\n      {animePage &&\r\n        animePage.media &&\r\n        animePage.media.map((anime) => (\r\n          <AnimeItemContainer>\r\n            <AnimeCover>\r\n              <img src={anime?.coverImage?.extraLarge || \"\"} />\r\n            </AnimeCover>\r\n            <AnimeTitle>{anime?.title?.english}</AnimeTitle>\r\n            <h5>Avergae Score: {anime?.averageScore}</h5>\r\n          </AnimeItemContainer>\r\n        ))}\r\n    </HotAnimeContainer>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { Dispatch } from \"redux\";\r\nimport styled from \"styled-components\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport animeService from \"../../services/animeService\";\r\nimport { GetAnimePage } from \"../../services/animeService/__generated__/GetAnimePage\";\r\nimport { setAnimePage } from \"./HomePageSlice\";\r\nimport { HotAnime } from \"./hotAnime\";\r\n\r\ninterface IHomePageProps {}\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst actionDispatch = (dispatch: Dispatch) => ({\r\n  setAnimePage: (page: GetAnimePage[\"Page\"]) => dispatch(setAnimePage(page)),\r\n});\r\n\r\nexport function HomePage(props: IHomePageProps) {\r\n  const { setAnimePage } = actionDispatch(useAppDispatch());\r\n\r\n  const fetchAnimePage = async () => {\r\n    const animePage = await animeService.getAnimePage(0, 200).catch((err) => {\r\n      console.log(\"Error: \", err);\r\n    });\r\n\r\n    console.log(\"Anime page: \", animePage);\r\n    if (animePage) setAnimePage(animePage);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchAnimePage();\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <h1>Hot Anime</h1>\r\n      <HotAnime />\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { HomePage } from \"./app/containers/HomePage\";\n\nconst AppContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nfunction App() {\n  return (\n    <AppContainer>\n      <HomePage />\n    </AppContainer>\n  );\n}\n\nexport default App;\n","import {\n  configureStore,\n  ThunkAction,\n  Action,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport homePageReducer from \"./containers/HomePage/HomePageSlice\";\nimport ReduxLogger from \"redux-logger\";\n\nconst middleware = (getDefaultMiddleware: any) =>\n  getDefaultMiddleware().concat(ReduxLogger);\n\nexport const store = configureStore({\n  middleware,\n  reducer: {\n    homePage: homePageReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { store } from \"./app/store\";\r\nimport \"./app/assets/css/index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { ApolloProvider } from \"@apollo/client\";\r\nimport { apolloClient } from \"./app/graphql\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ApolloProvider client={apolloClient}>\r\n        <App />\r\n      </ApolloProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}